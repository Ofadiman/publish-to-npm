name: CI/CD

#on:
#  push:
#    branches:
#      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  main:
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4
        with:
          version: 7.29.0
      - name: Setup node
        uses: actions/setup-node@v3.6.0
        with:
          node-version: 18.12.1
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Changeset status
        run: pnpm changeset status --output changeset-status.json
      - name: Find out if there is something to publish
        id: should_publish
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')

            const changesetStatus = JSON.parse(fs.readFileSync('./changeset-status.json', { encoding: 'utf8' }))
            core.info(JSON.stringify(changesetStatus))
            core.info(JSON.stringify(changesetStatus.releases))
            core.info(changesetStatus.releases.length)

            if (changesetStatus.releases.length === 0) {
              core.info('WTF')
              core.setOutput('res', 'no')
              core.info(JSON.stringify(changesetStatus.releases))
            } else {
              core.info('OK')
              core.setOutput('res', 'yes')
              core.info(JSON.stringify(changesetStatus.releases))
            }
      - name: Debug output
        run: |
          echo "output is: ${{ steps.should_publish.outputs.res }}"
      - name: Generate changelog
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        run: pnpm changeset version
      - name: Configure git
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Build
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        run: pnpm build
      - name: Setup npmrc
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        run: |
          pnpm config set access public --location project
          pnpm config set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }} --location project
      - name: Add files and commit changes
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        run: |
          git add .
          git commit -m "chore: generate changelog" -m "" -m "" -m "[skip ci]"
      - name: Push changes
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        run: git push origin main
      - name: Publish to NPM
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        run: pnpm publish -r --report-summary
      - name: Debug changesets output
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        run: cat pnpm-publish-summary.json
      - name: Create slack message
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        id: create_slack_message
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')

            const publishSummary = JSON.parse(
              fs.readFileSync('./pnpm-publish-summary.json', { encoding: 'utf8' }),
            )

            let message = '*Successfully published*\n```\n'
            publishSummary.publishedPackages.forEach((publishedPackage) => {
              message += `  - ${publishedPackage.name}@${publishedPackage.version}\n`
            })
            message += '```'

            core.info(message)

            core.setOutput('message', message)
      - name: Send slack message
        if: ${{ steps.should_publish.outputs.res == 'yes' }}
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.create_slack_message.outputs.message }}"
                  }
                }
              ]
            }
